// Generated by CoffeeScript 1.9.3
(function() {
  var board_6x4;

  board_6x4 = {
    "nodes": [
      {
        "id": "(0,0)",
        "x": 0,
        "y": 0
      }, {
        "id": "(1,0)",
        "x": 2540,
        "y": 0
      }, {
        "id": "(2,0)",
        "x": 5080,
        "y": 0
      }, {
        "id": "(3,0)",
        "x": 7620,
        "y": 0
      }, {
        "id": "(4,0)",
        "x": 10160,
        "y": 0
      }, {
        "id": "(5,0)",
        "x": 12700,
        "y": 0
      }, {
        "id": "(0,1)",
        "x": 0,
        "y": 2540
      }, {
        "id": "(1,1)",
        "x": 2540,
        "y": 2540
      }, {
        "id": "(2,1)",
        "x": 5080,
        "y": 2540
      }, {
        "id": "(3,1)",
        "x": 7620,
        "y": 2540
      }, {
        "id": "(4,1)",
        "x": 10160,
        "y": 2540
      }, {
        "id": "(5,1)",
        "x": 12700,
        "y": 2540
      }, {
        "id": "(0,2)",
        "x": 0,
        "y": 5080
      }, {
        "id": "(1,2)",
        "x": 2540,
        "y": 5080
      }, {
        "id": "(2,2)",
        "x": 5080,
        "y": 5080
      }, {
        "id": "(3,2)",
        "x": 7620,
        "y": 5080
      }, {
        "id": "(4,2)",
        "x": 10160,
        "y": 5080
      }, {
        "id": "(5,2)",
        "x": 12700,
        "y": 5080
      }, {
        "id": "(0,3)",
        "x": 0,
        "y": 7620
      }, {
        "id": "(1,3)",
        "x": 2540,
        "y": 7620
      }, {
        "id": "(2,3)",
        "x": 5080,
        "y": 7620
      }, {
        "id": "(3,3)",
        "x": 7620,
        "y": 7620
      }, {
        "id": "(4,3)",
        "x": 10160,
        "y": 7620
      }, {
        "id": "(5,3)",
        "x": 12700,
        "y": 7620
      }
    ],
    "edges": [
      {
        "id": "(0,0)-(1,0)",
        "a": "(0,0)",
        "b": "(1,0)"
      }, {
        "id": "(1,0)-(2,0)",
        "a": "(1,0)",
        "b": "(2,0)"
      }, {
        "id": "(2,0)-(3,0)",
        "a": "(2,0)",
        "b": "(3,0)"
      }, {
        "id": "(3,0)-(4,0)",
        "a": "(3,0)",
        "b": "(4,0)"
      }, {
        "id": "(4,0)-(5,0)",
        "a": "(4,0)",
        "b": "(5,0)"
      }, {
        "id": "(0,1)-(1,1)",
        "a": "(0,1)",
        "b": "(1,1)"
      }, {
        "id": "(1,1)-(2,1)",
        "a": "(1,1)",
        "b": "(2,1)"
      }, {
        "id": "(2,1)-(3,1)",
        "a": "(2,1)",
        "b": "(3,1)"
      }, {
        "id": "(3,1)-(4,1)",
        "a": "(3,1)",
        "b": "(4,1)"
      }, {
        "id": "(4,1)-(5,1)",
        "a": "(4,1)",
        "b": "(5,1)"
      }, {
        "id": "(0,2)-(1,2)",
        "a": "(0,2)",
        "b": "(1,2)"
      }, {
        "id": "(1,2)-(2,2)",
        "a": "(1,2)",
        "b": "(2,2)"
      }, {
        "id": "(2,2)-(3,2)",
        "a": "(2,2)",
        "b": "(3,2)"
      }, {
        "id": "(3,2)-(4,2)",
        "a": "(3,2)",
        "b": "(4,2)"
      }, {
        "id": "(4,2)-(5,2)",
        "a": "(4,2)",
        "b": "(5,2)"
      }, {
        "id": "(0,3)-(1,3)",
        "a": "(0,3)",
        "b": "(1,3)"
      }, {
        "id": "(1,3)-(2,3)",
        "a": "(1,3)",
        "b": "(2,3)"
      }, {
        "id": "(2,3)-(3,3)",
        "a": "(2,3)",
        "b": "(3,3)"
      }, {
        "id": "(3,3)-(4,3)",
        "a": "(3,3)",
        "b": "(4,3)"
      }, {
        "id": "(4,3)-(5,3)",
        "a": "(4,3)",
        "b": "(5,3)"
      }, {
        "id": "(0,0)-(0,1)",
        "a": "(0,0)",
        "b": "(0,1)"
      }, {
        "id": "(1,0)-(1,1)",
        "a": "(1,0)",
        "b": "(1,1)"
      }, {
        "id": "(2,0)-(2,1)",
        "a": "(2,0)",
        "b": "(2,1)"
      }, {
        "id": "(3,0)-(3,1)",
        "a": "(3,0)",
        "b": "(3,1)"
      }, {
        "id": "(4,0)-(4,1)",
        "a": "(4,0)",
        "b": "(4,1)"
      }, {
        "id": "(5,0)-(5,1)",
        "a": "(5,0)",
        "b": "(5,1)"
      }, {
        "id": "(0,1)-(0,2)",
        "a": "(0,1)",
        "b": "(0,2)"
      }, {
        "id": "(1,1)-(1,2)",
        "a": "(1,1)",
        "b": "(1,2)"
      }, {
        "id": "(2,1)-(2,2)",
        "a": "(2,1)",
        "b": "(2,2)"
      }, {
        "id": "(3,1)-(3,2)",
        "a": "(3,1)",
        "b": "(3,2)"
      }, {
        "id": "(4,1)-(4,2)",
        "a": "(4,1)",
        "b": "(4,2)"
      }, {
        "id": "(5,1)-(5,2)",
        "a": "(5,1)",
        "b": "(5,2)"
      }, {
        "id": "(0,2)-(0,3)",
        "a": "(0,2)",
        "b": "(0,3)"
      }, {
        "id": "(1,2)-(1,3)",
        "a": "(1,2)",
        "b": "(1,3)"
      }, {
        "id": "(2,2)-(2,3)",
        "a": "(2,2)",
        "b": "(2,3)"
      }, {
        "id": "(3,2)-(3,3)",
        "a": "(3,2)",
        "b": "(3,3)"
      }, {
        "id": "(4,2)-(4,3)",
        "a": "(4,2)",
        "b": "(4,3)"
      }, {
        "id": "(5,2)-(5,3)",
        "a": "(5,2)",
        "b": "(5,3)"
      }
    ]
  };

  $(document).ready(function() {
    var board, cursor, cursorPosition, edgeMap, edgeShapeMap, edges, edgesUnderPoint, logicalToPhysical, micrometerToPixel, nodeMap, nodeShapeMap, nodes, nodesUnderPoint, ref, ref1, shapeIdToEdgeMap, shapeIdToNodeMap, shapesUnderPoint, stage, stageUpdate, stageUpdateBus, windowSize;
    console.log("ready");
    stage = new createjs.Stage("canvas1");
    board = board_6x4;
    nodeMap = {};
    nodes = (ref = board != null ? board.nodes : void 0) != null ? ref : [];
    nodes.forEach(function(node) {
      return nodeMap[node.id] = node;
    });
    edgeMap = {};
    edges = (ref1 = board != null ? board.edges : void 0) != null ? ref1 : [];
    edges.forEach(function(edge) {
      return edgeMap[edge.id] = edge;
    });
    micrometerToPixel = function(value) {
      return value / 1000 * 20;
    };
    nodeShapeMap = {};
    shapeIdToNodeMap = {};
    nodes.forEach(function(node) {
      var r, shape, x, y;
      x = micrometerToPixel(node.x);
      y = micrometerToPixel(node.y);
      r = 10;
      shape = new createjs.Shape();
      shape.graphics.beginFill("DeepSkyBlue").drawCircle(0, 0, r);
      shape.x = x;
      shape.y = y;
      stage.addChild(shape);
      nodeShapeMap[node.id] = shape;
      return shapeIdToNodeMap[shape.id] = node;
    });
    edgeShapeMap = {};
    shapeIdToEdgeMap = {};
    edges.forEach(function(edge) {
      var shape, x1, x2, y1, y2;
      x1 = micrometerToPixel(nodeMap[edge.a].x);
      y1 = micrometerToPixel(nodeMap[edge.a].y);
      x2 = micrometerToPixel(nodeMap[edge.b].x);
      y2 = micrometerToPixel(nodeMap[edge.b].y);
      shape = new createjs.Shape();
      shape.graphics.setStrokeStyle(3).beginStroke("red").moveTo(x1, y1).lineTo(x2, y2);
      stage.addChild(shape);
      edgeShapeMap[edge.id] = shape;
      return shapeIdToEdgeMap[shape.id] = edge;
    });
    cursor = new createjs.Shape();
    cursor.graphics.beginStroke("green").moveTo(0, -5).lineTo(0, +5).moveTo(-5, 0).lineTo(+5, 0);
    stage.addChild(cursor);
    stageUpdateBus = new Bacon.Bus();
    stageUpdateBus.throttle(50).onValue(function(v) {
      return stage.update();
    });
    stageUpdate = function() {
      return stageUpdateBus.push(null);
    };
    stageUpdate();
    cursorPosition = $("#canvas1").asEventStream("mousemove").map(function(e) {
      return {
        x: e.offsetX,
        y: e.offsetY
      };
    });
    cursorPosition.onValue(function(value) {
      cursor.x = value.x;
      cursor.y = value.y;
      return stageUpdate();
    });
    logicalToPhysical = function(value) {
      return value / 20 * 1000;
    };
    shapesUnderPoint = cursorPosition.map(function(value) {
      return stage.getObjectsUnderPoint(value.x, value.y);
    });
    nodesUnderPoint = shapesUnderPoint.map(function(shapes) {
      return shapes.map(function(shape) {
        return shapeIdToNodeMap[shape.id];
      }).filter(function(node) {
        return node != null;
      });
    });
    edgesUnderPoint = shapesUnderPoint.map(function(shapes) {
      return shapes.map(function(shape) {
        return shapeIdToEdgeMap[shape.id];
      }).filter(function(edge) {
        return edge != null;
      });
    });
    nodesUnderPoint.onValue(function(nodes) {
      nodes.forEach(function(node) {
        var shape;
        shape = nodeShapeMap[node.id];
        return shape.graphics.clear().beginFill("blue").drawCircle(0, 0, 10);
      });
      return stageUpdate();
    });
    edgesUnderPoint.onValue(function(edges) {
      edges.forEach(function(edge) {
        var shape, x1, x2, y1, y2;
        x1 = micrometerToPixel(nodeMap[edge.a].x);
        y1 = micrometerToPixel(nodeMap[edge.a].y);
        x2 = micrometerToPixel(nodeMap[edge.b].x);
        y2 = micrometerToPixel(nodeMap[edge.b].y);
        shape = edgeShapeMap[edge.id];
        return shape.graphics.clear().setStrokeStyle(3).beginStroke("blue").moveTo(x1, y1).lineTo(x2, y2);
      });
      return stageUpdate();
    });
    windowSize = $(window).asEventStream("resize").map(function(e) {
      return {
        width: $(e.target).width(),
        height: $(e.target).height()
      };
    });
    windowSize.onValue(function(value) {
      stage.canvas.width = value.width;
      stage.canvas.height = value.height;
      return stageUpdate();
    });
    $(window).trigger("resize");
    return $(document).asEventStream("keydown").onValue(function(e) {
      switch (e.keyCode) {
        case 38:
          return console.log("up");
        case 40:
          return console.log("down");
        case 37:
          return console.log("left");
        case 40:
          return console.log("right");
      }
    });
  });

}).call(this);
